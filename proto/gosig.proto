syntax = "proto3";

package gosig;

option go_package = "./types";

// Transaction represents a simple payment of money. `from`` and `to` are
// pubkeys of users
message Transaction {
  bytes from = 1;
  bytes to = 2;
  uint64 amount = 3;
}

message SignedTransaction {
  Transaction tx = 1;
  bytes sig = 2;
}

message TransactionHashes {
  repeated bytes tx_hashes = 1;
}

message SignedTransactions { repeated SignedTransaction txs = 1; }

message BlockHeader {
  uint32 height = 1;
  bytes parent_hash = 2;
  // sign(privKey, Q^h), the preimage of the proposer score L^r
  bytes proposer_proof = 3;
  // a flat hash of all transaction hashes in this block.
  // i.e. hash(hash(tx1) || hash(tx2) || ... || hash(txN))
  bytes tx_root = 4;
}

message Envelope {
  bytes sig = 1;
  uint32 validator_index = 2;
  Message msg = 3;
}

message Message {
  oneof message {
    bytes bytes = 1; // arbitrary bytes for testing purpose
    BlockProposal proposal = 2;
    PrepareCertificate prepare = 3;
    TentativeCommitCertificate tc = 4;
    TransactionHashes tx_hashes = 5;
    SignedTransaction tx = 6;
  }
}

message Envelopes {
  repeated Envelope msgs = 1;
}

message BlockProposal {
  uint32 round = 1;
  BlockHeader block_header = 2;
  Certificate cert = 3; // either the P-cert of a TC block or the TC-cert of the previous block
  uint32 proposer_index = 4;
}

message PrepareCertificate {
  Prepare msg = 1;
  Certificate cert = 2; // can be a partial certificate (e.g. signed by less than 2/3)
}

message Prepare {
  bytes block_hash = 1;
}

message TentativeCommitCertificate {
  TentativeCommit msg = 1;
  Certificate cert = 2; // can be a partial certificate (e.g. signed by less than 2/3)
}

message TentativeCommit {
  bytes block_hash = 1;
}

message Certificate {
  bytes agg_sig = 1; // aggregated signatures
  repeated uint32 sig_counts = 2; // an array of how many times each validator provided the signatures
  uint32 round = 3; // the round in which this certificate is formed
}