// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: test.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkTest_GetMsgs_FullMethodName   = "/gosig.NetworkTest/GetMsgs"
	NetworkTest_Broadcast_FullMethodName = "/gosig.NetworkTest/Broadcast"
)

// NetworkTestClient is the client API for NetworkTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkTestClient interface {
	GetMsgs(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastRes, error)
}

type networkTestClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkTestClient(cc grpc.ClientConnInterface) NetworkTestClient {
	return &networkTestClient{cc}
}

func (c *networkTestClient) GetMsgs(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRes)
	err := c.cc.Invoke(ctx, NetworkTest_GetMsgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkTestClient) Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastRes)
	err := c.cc.Invoke(ctx, NetworkTest_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkTestServer is the server API for NetworkTest service.
// All implementations should embed UnimplementedNetworkTestServer
// for forward compatibility.
type NetworkTestServer interface {
	GetMsgs(context.Context, *GetReq) (*GetRes, error)
	Broadcast(context.Context, *BroadcastReq) (*BroadcastRes, error)
}

// UnimplementedNetworkTestServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkTestServer struct{}

func (UnimplementedNetworkTestServer) GetMsgs(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgs not implemented")
}
func (UnimplementedNetworkTestServer) Broadcast(context.Context, *BroadcastReq) (*BroadcastRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedNetworkTestServer) testEmbeddedByValue() {}

// UnsafeNetworkTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkTestServer will
// result in compilation errors.
type UnsafeNetworkTestServer interface {
	mustEmbedUnimplementedNetworkTestServer()
}

func RegisterNetworkTestServer(s grpc.ServiceRegistrar, srv NetworkTestServer) {
	// If the following call pancis, it indicates UnimplementedNetworkTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkTest_ServiceDesc, srv)
}

func _NetworkTest_GetMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkTestServer).GetMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkTest_GetMsgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkTestServer).GetMsgs(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkTest_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkTestServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkTest_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkTestServer).Broadcast(ctx, req.(*BroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkTest_ServiceDesc is the grpc.ServiceDesc for NetworkTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gosig.NetworkTest",
	HandlerType: (*NetworkTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMsgs",
			Handler:    _NetworkTest_GetMsgs_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _NetworkTest_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
